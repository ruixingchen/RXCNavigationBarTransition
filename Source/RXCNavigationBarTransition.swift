//
//  RXCNavigationBarTransition.swift
//  RXCNavigationBarTransition
//
//  Created by ruixingchen on 11/7/19.
//  Copyright ¬© 2019 ruixingchen. All rights reserved.
//

import UIKit

public final class RXCNavigationBarTransition {

    #if (debug || DEBUG)
    public static var debugMode:Bool = true
    #else
    public static var debugMode:Bool = false
    #endif

    public enum WorkingMode {
        case blackList([String]), whiteList([String]), prefix([String])
        case custom((UIViewController)->Bool)
    }

    public static var workingMode:WorkingMode = .blackList([])

    public static var navigationWorkingMode:WorkingMode = .blackList([])

    //‰∏ãÈù¢ÁöÑÊòØÈªòËÆ§Ê†∑Âºè, ÊúÄÂ•ΩÂú®Âú®didLaunchÈáåÈù¢ËÆæÁΩÆ, ÂΩìÁ¨¨‰∏Ä‰∏™NavÂ∑≤ÁªèÊòæÁ§∫ÂêéÊúÄÂ•ΩÂ∞±‰∏çË¶ÅÊîπ‰∫Ü

    public static var defaultAlpha:CGFloat = 1.0
    public static var defaultBackgroundAlpha:CGFloat = 1.0
    public static var defaultBackgroundColor:UIColor = RNBHelper.systemDefaultNavigationBarBackgroundColor
    public static var defaultForegroundColor:UIColor = RNBHelper.systemDefaultNavigationBarForegroundColor
    public static var defaultTintColor:UIColor = RNBHelper.systemDefaultNavigationBarTintColor
    public static var defaultTitleColor:UIColor = RNBHelper.systemDefaultNavigationBarTitleColor
    public static var defaultShadowViewHidden:Bool = RNBHelper.systemDefaultNavigationBarShadowViewHidden
    public static var defaultStatusBarStyle:UIStatusBarStyle = RNBHelper.systemDefaultStatusBarStyle

    private static var started:Bool = false

    ///ÂºÄÂßãÊñπÊ≥ï‰∫§Êç¢ÁöÑÂÖ•Âè£, ÈúÄË¶ÅÂú®didLaunch‰∏≠Á¨¨‰∏Ä‰∏™VCÂàùÂßãÂåñ‰πãÂâçË∞ÉÁî®, Ê≤°ÊúâÂÅöÁ∫øÁ®ãÂÆâÂÖ®, ËøôÈáåÁî±‰ΩøÁî®ËÄÖËá™Ë°å‰øùËØÅÁ∫øÁ®ãÂÆâÂÖ®üòÇ
    public static func start() {
        if started {return}
        started = true
        UINavigationBar.rnb_startMethodExchange()
        UINavigationController.rnb_startMethodExchange_navigationController()
        UIViewController.rnb_startMethodExchange_viewController()
    }

}

extension RXCNavigationBarTransition {

    ///ÊòØÂê¶Â∫îËØ•Â∑•‰ΩúÂú®Êüê‰∏™NavController‰∏ä
    internal static func shouldWorkOnNavigationController(_ controller:UINavigationController)->Bool {
        if let enabled = controller.rnb_navigationEnabled {
            return enabled
        }else {
            switch navigationWorkingMode {
            case .blackList(let list):
                let controllerClassName = String.init(describing: controller.classForCoder)
                return !list.contains(controllerClassName)
            case .whiteList(let list):
                let controllerClassName = String.init(describing: controller.classForCoder)
                return list.contains(controllerClassName)
            case .prefix(let list):
                let controllerClassName = String.init(describing: controller.classForCoder)
                return list.contains(where: {controllerClassName.hasPrefix($0)})
            case .custom(let closure):
                return closure(controller)
            }
        }
    }

    ///ÊòØÂê¶Â∫îËØ•Â∑•‰ΩúÂú®Êüê‰∏™Controller‰∏ä, Â¶ÇÊûúÊüê‰∏™Controller‰∏çÂ∑•‰Ωú, Âàô‰ºö‰ΩøÁî® (ÂØºËà™Ê†èÈªòËÆ§Ê†∑Âºè ?? Á≥ªÁªüÈªòËÆ§Ê†∑Âºè)
    internal static func shouldWorkOnViewController(_ controller:UIViewController)->Bool {
        if let enabled = controller.rnb_enabled {
            return enabled
        }else {
            switch workingMode {
            case .blackList(let list):
                let controllerClassName = String.init(describing: controller.classForCoder)
                return !list.contains(controllerClassName)
            case .whiteList(let list):
                let controllerClassName = String.init(describing: controller.classForCoder)
                return list.contains(controllerClassName)
            case .prefix(let list):
                let controllerClassName = String.init(describing: controller.classForCoder)
                return list.contains(where: {controllerClassName.hasPrefix($0)})
            case .custom(let closure):
                return closure(controller)
            }
        }
    }
}

fileprivate extension UINavigationBar {

    static func rnb_startMethodExchange() {
        let needSwizzleSelectors:[Selector] = [
            #selector(layoutSubviews)
        ]
        for i in needSwizzleSelectors.enumerated() {
            guard let originalMethod = class_getInstanceMethod(self, i.element) else {
                assertionFailure("method exchange failed, origin selector not found:\(i.element)")
                continue
            }
            guard let newSelector = class_getInstanceMethod(self, Selector("rnbsw_\(i.element.description)")) else {
                assertionFailure("method exchange failed, new selector not found: rnbsw_\(i.element.description)")
                continue
            }
            method_exchangeImplementations(originalMethod, newSelector)
        }
    }

}

fileprivate extension UIViewController {
    static func rnb_startMethodExchange_viewController() {
        let needSwizzleSelectors:[Selector] = [
            #selector(viewWillAppear(_:)),
            #selector(viewDidAppear(_:)),
            #selector(viewWillDisappear(_:)),
            #selector(viewDidDisappear(_:))
        ]
        for i in needSwizzleSelectors.enumerated() {
            guard let originalMethod = class_getInstanceMethod(self, i.element) else {
                assertionFailure("method exchange failed, origin selector not found:\(i.element)")
                continue
            }
            guard let newSelector = class_getInstanceMethod(self, Selector("rnbsw_\(i.element.description)")) else {
                assertionFailure("method exchange failed, new selector not found: rnbsw_\(i.element.description)")
                continue
            }
            method_exchangeImplementations(originalMethod, newSelector)
        }
    }
}

extension UINavigationController {
    internal static func rnb_startMethodExchange_navigationController() {
        let needSwizzleSelectors:[Selector] = [
            NSSelectorFromString("_updateInteractiveTransition:"),
            #selector(UINavigationController.pushViewController(_:animated:)),
            //ËøôÈáåÁöÑpopViewController(animated:)‰∏çÂèØ‰ª•‰ΩøÁî®descriptionÊù•ÁîüÊàêÂØπÂ∫îÁöÑrnbsw, ÊâÄ‰ª•Ëøô‰∏™ÊñπÊ≥ïÂè™ËÉΩÊâãÂä®ÊåáÂÆö‰∫Ü
            #selector(UINavigationController.popViewController(animated:)),
            #selector(UINavigationController.popToViewController(_:animated:)),
            #selector(UINavigationController.popToRootViewController(animated:))
        ]
        let newSelectors:[Selector] = [
            #selector(rnbsw__updateInteractiveTransition(_:)),
            #selector(rnbsw_pushViewController(_:animated:)),
            #selector(rnbsw_popViewController(animated:)),
            #selector(rnbsw_popToViewController(_:animated:)),
            #selector(rnbsw_popToRootViewController(animated:))
        ]

        for i in needSwizzleSelectors.enumerated() {
            guard let originalMethod = class_getInstanceMethod(self, i.element) else {
                assertionFailure("method exchange failed, origin selector not found:\(i.element)")
                continue
            }
            guard let newSelector = class_getInstanceMethod(self, newSelectors[i.offset]) else {
                assertionFailure("method exchange failed, new selector not found:\(newSelectors[i.offset])")
                continue
            }
            method_exchangeImplementations(originalMethod, newSelector)
        }
    }
}
